# Variables for file 
dim port
dim led_value
dim read_result
dim connected 

# Constants
const TIMER_SECONDS = 1
const TICKS_PER_SECOND = 32768

const LED_PIN = $01  # P0_0
const LED_PORT = 0

const MAIN_TIMER_HANDLE = 0

# System Boot event listener
event system_boot(major, minor, patch, build, ll_version, protocol_version, hw)

    # Set device to advertisement mode and allow undirected connections
    call gap_set_mode(gap_general_discoverable, gap_undirected_connectable)

    # Configure P0.0 as output
    call hardware_io_port_config_direction(LED_PORT, LED_PIN)
 
    # Set timer to generate event every 1s (0 is repeating, 1 is single-shot for final parameter)
    call hardware_set_soft_timer(TIMER_SECONDS * TICKS_PER_SECOND, MAIN_TIMER_HANDLE, 0)

    led_value = 0    
    connected = 0
end


# Timer event listener toggles LED at a certain rate
event hardware_soft_timer(handle)
  call hardware_io_port_read(0, $01)(read_result, port, led_value)

  if (led_value & LED_PIN) then
    call hardware_io_port_write(LED_PORT, LED_PIN, 0)
  else
    call hardware_io_port_write(LED_PORT, LED_PIN, LED_PIN)
  end if
end


# Connection event listener
event connection_status(connection, flags, address, address_type, conn_interval, timeout, latency, bonding)
    if connected = 0 then
        # Set up a connection interval of between 6*1.25ms to 10*1.25ms (7.5-12.5ms)
        # Android (and iOS?) respond to connection interval updates, but cannot set them
        call connection_update(connection, 6, 10, latency, timeout)
    end if
    connected = 1
end


# Disconnection event listener
event connection_disconnected(handle, result)
    connected = 0
    # Makes the device visible and connectable
    call gap_set_mode(gap_general_discoverable, gap_undirected_connectable)
end
